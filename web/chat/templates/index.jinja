{% extends "base.jinja" %}

{% block head %}
<link rel="stylesheet" href="{{ static('pages/index.css') }}">
{% endblock %}

{% block body %}
<main>

  <div id="sidebar">
  </div>

  <div id="chatContainer">
    <div id="chat">
      <div id="chatMessagesContainer">
      </div>

      <div id="chatInputContainer">
        <textarea id="chatInput" placeholder="Ask a question"></textarea>
        <button id="chatSubmit">â–²</button>
      </div>
    </div>
  </div>

</main>

<script>
{
  const UserMessage = (message) =>
    van.tags.div(
      { class: "user-message" },
      message.text,
    );

  const BotMessage = (message) =>
    van.tags.div(
      { class: "bot-message" },
      message.text,
    );

  class ChatArea {
    constructor() {
      // state
      this.messages = van.state([]);

      // init
      this.initUI();
      this.initSSE();
    }

    initUI() {
      this.ui = {};

      this.ui.chatInput = document.getElementById("chatInput");
      this.ui.chatInput.addEventListener("input",  this.adjustChatInputHeight.bind(this));
      this.ui.chatInput.addEventListener("keypress", (e) => {
        if (e.key === "Enter" && !e.shiftKey) {
          e.preventDefault();
          this.submitMessage();
        }
      });
      this.adjustChatInputHeight(); // call to prevent height jump when initially typing

      this.ui.chatSubmit = document.getElementById("chatSubmit");
      this.ui.chatSubmit.addEventListener("click", () => {
        this.submitMessage();
      });

      this.ui.chatMessagesContainer = document.getElementById("chatMessagesContainer");
      van.add(
        this.ui.chatMessagesContainer,
        () => van.tags.div(
          { id: "chatMessages" },
          this.messages.val.map(
            message =>
              message.fromUser
                ? UserMessage(message)
                : BotMessage(message)
          )
        )
      );
      van.derive(() => {
        this.messages.val;
        setTimeout(this.adjustChatMessagesScroll.bind(this), 0);
      });
    }

    adjustChatMessagesScroll() {
      this.ui.chatMessagesContainer.scrollTop = this.ui.chatMessagesContainer.scrollHeight;
      const lastMessage = document.getElementById("chatMessages").lastChild;
      if (!lastMessage) return;
      lastMessage.scrollIntoView({ block: "start" });
    }

    adjustChatInputHeight() {
      this.ui.chatInput.style.height = 'auto'; // force height reset
      const newHeight = Math.min(this.ui.chatInput.scrollHeight, 200);
      this.ui.chatInput.style.height = newHeight + 'px';
    }

    enableChatInput(enable) {
      this.ui.chatInput.disabled = !enable;
      this.ui.chatSubmit.disabled = !enable;
    }

    initSSE() {
      const eventSource = new ReconnectingEventSource("/_sse/botchunk");
      eventSource.onmessage = async (event) => {
        const message = JSON.parse(event.data);
        if (message.stop) {
          this.enableChatInput(true);
          return;
        }

        let end = this.messages.val.length - 1;
        let lastMessage = this.messages.val[end];
        console.log(lastMessage);
        if (lastMessage.fromUser) {
          this.messages.val = [
            ...this.messages.val,
            { fromUser: false, text: "" },
          ];
          end = this.messages.val.length - 1;
          lastMessage = this.messages.val[end];
        }

        lastMessage.text += message.chunk;
        this.messages.val = [...this.messages.val];
      };
    }

    submitMessage() {
      const userMessage = this.ui.chatInput.value.trim();
      if (!userMessage) return;

      this.ui.chatInput.value = "";
      this.adjustChatInputHeight();

      this.messages.val = [
        ...this.messages.val,
        { fromUser: true, text: userMessage },
      ];

      this.enableChatInput(false);
      fetch(`{{ url('send_message')|escapejs }}`,
        {
          method: "POST",
          headers: {
            'X-CSRFToken': '{{ csrf_token|escapejs }}',
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ "message": userMessage }),
        }
      );
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    new ChatArea();
  });
}
</script>
{% endblock %}
